Fragen:

- Momentan ermoeglicht cuteness mehr schaden, macht ihn aber nicht zwingend hoeher. Soll das geaendert werden?
- helper.lua in etwas aussagekraeftigeres umbenennen, z.B. objectOrientation.lua oder class.lua oder so?
- ALTER, love2d hat ein event-module..
- CollisionSelectSystem erlaubt nur ein Collision-Objekt pro Kombination

Ideen:

Komplette Ummodelierung des Spielprinzips:
	Cuties wesentlich kleiner:
		- Ebenen für Cuties einbauen (Jump & Run)
			- Levelelemente wie verschiebbare Kisten, explodierende Fässer etc. 
		- Mehrere Cuties als Gegner mit weniger Leben
		- Fortlaufendes Spiel (Vlt. verschiedene Level bei denen Gegner stärker werden, andere Backgrounds etc.)
		- Level-up System und Shop während des Spiels jederzeit aufrufbar
			- Gegner droppen: 
				- Medipacks
				- Munition ?
				- Items
				- Powerups
			- Gegner bringen XP
			- Gegner droppen Gold

	Itemsystem: 
		Waffen und Passive Items kaufbar für Geld. (Eventuell schwierig so zu implementieren, dass es gut aussieht...)
		Aktiv: 
			Ak-47: 
				Feuert regelmäßig einen Schuss linear in Richtung des Gegners. Schaden 1-2, 2 Sek-Takt?
		Passiv:
			Fettschicht:
				Fügt +20 Leben hinzu.
			Rüstung: 
				Fängt 1 Schaden ab.

Attribute:
	- Kollidieren mit Wänden und Böden, bei zu hoher Geschwindigkeit Schaden?
		- Leicht zu implementieren
		- Mobbelligkeit: Wegstoßung, weniger Abbremsung? Alternativ hinzufügen von Masse.
			-Masse könnte zu schnell op werden.
			
- MONSTERBEAMZ
- Attacken/Funktionen:
	- Dashing
	- Ausweichen durch Shield 
	- Shooting nach Maus
	- Explosives:
		Fässer die bei Schuss explodieren
		Granaten
	- Hammer
Juiciness:
	Wobble bei Aufprall. dynamisch!
	Wobble bei Upgrade, Freudensound

Sounds:
	Treffersound: Zufällige Soundauswahl
	Sounds noch zurechtschneiden
	Hüfpsounds bei Kollision mit Wänden.

Grafik:
	Levels von hässlich zu cute, wie bei den cuties

Steuerung:

	WAD: Bewegen nach oben/rechts/links
	S: Block
	Space: Slowmo starten/stoppen
	Linksklick: Spezialaktion (Schuss, C4 Platzieren...)
	Rechtsklick: Dash

Allgemeines DamageSystem:
	Shot bekommt life, alles bekommt life.
	Im DamageSystem wird generell das Verhalten von 2 Entities die miteinander kollidieren bestimmt. 
		Dann würde man für den Shot ein System machen, bei dem es gelöscht wird, nachdem es mit einer Entity kollidiert, die keine Lifecomponent hat. 
		Sobald die zweite Entity eine LIfecomponentn besitzt, wird automatisch der Schaden übermittelt.
		
		DeleteComponent? Bauen einer Art Garbage Collector für Entites? Interessante Idee. Das würde den Destroy der Entities aus den CollisionCallbacks in die Main:update ziehen, was in jedem Fall besser ist, da hiermit Fehler vermieden werden, da Callback und Update parallel laufen. ensure functions für Callback-functions? Ist es möglich eine Entity zu killen, während sie noch in einem Callback steckt? Grund für bisherige Bugs?

			Die SplatterParticles müssten in die Collisions eingeschlossen werden oder in das DeleteSystem, was allerdings in gewissem Maße die Idee des Garbage Collectors vernichten würde. Lieber Trennung. Ist es möglich eine andere kombination zu finden, sodass die Particle Systems selbst erkennen was los ist. Vor dem GarbageCollector ein ScanningSystem dazwischenschalten? Wäre übersichtlich, aber Umständlich. Außerdem mehr Updatefunktionen. Performance!


	ExplosionSystem: